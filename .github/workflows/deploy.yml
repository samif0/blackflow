name: CI/CD Deployment Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci 
      
      - name: Run tests
        run: npm test || echo "No tests available yet"
  
  deploy-staging:
    name: Deploy to Staging
    needs: test
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install SSH key for staging
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.STAGING_SSH_PRIVATE_KEY }}
        known_hosts: ${{ secrets.STAGING_SSH_KNOWN_HOSTS }}
        if_key_exists: replace
    
    - name: Create staging compose file
      run: |
        echo "version: '3'" > docker-compose.staging.yml
        echo "services:" >> docker-compose.staging.yml
        echo "  blackflow-staging:" >> docker-compose.staging.yml
        echo "    environment:" >> docker-compose.staging.yml
        echo "      - NODE_ENV=staging" >> docker-compose.staging.yml
        echo "      - API_URL=${STAGING_API_URL}" >> docker-compose.staging.yml
        echo "      - AUTH_SECRET=${STAGING_AUTH_SECRET}" >> docker-compose.staging.yml
        echo "      - DATABASE_URL=${STAGING_DATABASE_URL}" >> docker-compose.staging.yml
      env:
        STAGING_API_URL: NA
        STAGING_AUTH_SECRET: NA
        STAGING_DATABASE_URL: NA
    
    - name: Copy staging compose file to server
      run: |
        scp docker-compose.staging.yml ${{ secrets.STAGING_EC2_USERNAME }}@${{ secrets.STAGING_EC2_HOST }}:~/docker-compose.staging.yml
    
    - name: Deploy to staging
      run: |
        ssh ${{ secrets.STAGING_EC2_USERNAME }}@${{ secrets.STAGING_EC2_HOST }} 'bash -s' << 'ENDSSH'
          mkdir -p ~/app
          cd ~/app
          
          if [ -d "blackflow" ]; then
            cd blackflow
            git pull
          else
            git clone https://github.com/samif0/blackflow.git blackflow
            cd blackflow
          fi
          
          cp docker-compose.yml ../ || echo "No docker-compose.yml to copy"
          
          cd ..
          
          # Move the compose file from home directory
          mv ~/docker-compose.staging.yml ./
          
          # Deploy using Docker Compose
          docker-compose -f docker-compose.yml -f docker-compose.staging.yml down blackflow-staging || true
          docker-compose -f docker-compose.yml -f docker-compose.staging.yml up -d blackflow-staging
          
          # Clean up
          rm docker-compose.staging.yml
          docker image prune -af --force
          
          echo "Staging deployment complete!"
        ENDSSH
    
    - name: Verify staging deployment
      run: |
        echo "Staging deployment completed. Accessing health endpoint to verify..."
        sleep 10
        curl -s http://${{ secrets.STAGING_EC2_HOST }}:3000/api/health || echo "Could not reach health endpoint, but continuing anyway"
  
  wait-for-approval:
    name: Wait for Production Approval
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production
    steps:
    - name: Approval notification
      run: echo "Waiting for production deployment approval. This step will complete when the deployment is approved via GitHub Environments."
  
  deploy-production:
    name: Deploy to Production
    needs: wait-for-approval
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
        if_key_exists: replace
    
    - name: Create production compose file
      run: |
        echo "version: '3'" > docker-compose.prod.yml
        echo "services:" >> docker-compose.prod.yml
        echo "  blackflow-prod:" >> docker-compose.prod.yml
        echo "    environment:" >> docker-compose.prod.yml
        echo "      - NODE_ENV=production" >> docker-compose.prod.yml
        echo "      - API_URL=${PROD_API_URL}" >> docker-compose.prod.yml
        echo "      - AUTH_SECRET=${PROD_AUTH_SECRET}" >> docker-compose.prod.yml
        echo "      - DATABASE_URL=${PROD_DATABASE_URL}" >> docker-compose.prod.yml
      env:
        PROD_API_URL: NA
        PROD_AUTH_SECRET: NA
        PROD_DATABASE_URL: NA
    
    - name: Copy production compose file to server
      run: |
        scp docker-compose.prod.yml ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/docker-compose.prod.yml
        scp docker-compose.prod.yml ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST2 }}:~/docker-compose.prod.yml
    
    - name: Deploy to production
      run: |
        ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} 'bash -s' << 'ENDSSH'
          cd ~/app
          
          if [ -d "blackflow" ]; then
            cd blackflow
            git pull
          else
            git clone https://github.com/samif0/blackflow.git blackflow
            cd blackflow
          fi
          
          cd ..
          
          mv ~/docker-compose.prod.yml ./
          
          # Deploy using Docker Compose
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml down blackflow-prod || true
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d blackflow-prod
          
          rm docker-compose.prod.yml
          docker image prune -af --force
          
          echo "Production deployment complete!"
        ENDSSH

    - name: Deploy to production US-West-2 
      run: |
        ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST2 }} 'bash -s' << 'ENDSSH'
          cd ~/app
          
          if [ -d "blackflow" ]; then
            cd blackflow
            git pull
          else
            git clone https://github.com/samif0/blackflow.git blackflow
            cd blackflow
          fi
          
          cd ..
          
          mv ~/docker-compose.prod.yml ./
          
          # Deploy using Docker Compose
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml down blackflow-prod || true
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d blackflow-prod
          
          rm docker-compose.prod.yml
          docker image prune -af --force
          
          echo "Production deployment complete!"
        ENDSSH
    
    - name: Verify production deployment
      run: |
        echo "Production deployment completed. Accessing health endpoint to verify..."
        sleep 10
        curl -s http://${{ secrets.EC2_HOST }}:3000/api/health || echo "Could not reach health endpoint, but continuing anyway"
        curl -s http://${{ secrets.EC2_HOST2 }}:3000/api/health || echo "Could not reach health endpoint, but continuing anyway"