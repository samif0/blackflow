name: CI/CD Deployment Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci 
      
      - name: Run tests
        run: npm test || echo "No tests available yet"
  
  deploy-consolidated:
    name: Deploy to Consolidated Environment
    needs: test
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/key.pem
        chmod 600 ~/.ssh/key.pem
        ssh-keyscan ${{ secrets.EC2_HOST }} > ~/.ssh/known_hosts
        chmod 644 ~/.ssh/known_hosts
    
    - name: Create environment files
      run: |
        # Create staging environment file
        echo "version: '3'" > docker-compose.staging.yml
        echo "services:" >> docker-compose.staging.yml
        echo "  blackflow-staging:" >> docker-compose.staging.yml
        echo "    environment:" >> docker-compose.staging.yml
        echo "      - NODE_ENV=staging" >> docker-compose.staging.yml
        echo "      - API_URL=${STAGING_API_URL}" >> docker-compose.staging.yml
        echo "      - AUTH_SECRET=${STAGING_AUTH_SECRET}" >> docker-compose.staging.yml
        echo "      - DATABASE_URL=${STAGING_DATABASE_URL}" >> docker-compose.staging.yml
        
        # Create production environment file
        echo "version: '3'" > docker-compose.prod.yml
        echo "services:" >> docker-compose.prod.yml
        echo "  blackflow-prod:" >> docker-compose.prod.yml
        echo "    environment:" >> docker-compose.prod.yml
        echo "      - NODE_ENV=production" >> docker-compose.prod.yml
        echo "      - API_URL=${PROD_API_URL}" >> docker-compose.prod.yml
        echo "      - AUTH_SECRET=${PROD_AUTH_SECRET}" >> docker-compose.prod.yml
        echo "      - DATABASE_URL=${PROD_DATABASE_URL}" >> docker-compose.prod.yml
      env:
        STAGING_API_URL: NA
        STAGING_AUTH_SECRET: NA
        STAGING_DATABASE_URL: NA
        PROD_API_URL: NA
        PROD_AUTH_SECRET: NA
        PROD_DATABASE_URL: NA
    
    - name: Configure Nginx
      run: |
        # Ensure the nginx directories exist
        mkdir -p nginx/conf.d
        
        # Configure nginx with the server info
        export PROD_HOST="${{ secrets.EC2_HOST }}"
        export STAGING_HOST="staging.${{ secrets.EC2_HOST }}"
        chmod +x scripts/nginx/create-nginx-conf.sh scripts/nginx/create-server-blocks.sh
        ./scripts/nginx/create-nginx-conf.sh
        ./scripts/nginx/create-server-blocks.sh
    
    # Ensure app directory exists and create it if needed
    - name: Ensure app directory exists
      run: |
        ssh -i ~/.ssh/key.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} 'mkdir -p ~/app'
    
    # Check if this is the first deployment by checking for merged config file
    - name: Check if initial setup is needed
      id: check-setup
      run: |
        SETUP_NEEDED=$(ssh -i ~/.ssh/key.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "if [ -f ~/app/docker-compose.merged.yml ]; then echo 'false'; else echo 'true'; fi")
        echo "setup_needed=$SETUP_NEEDED" >> $GITHUB_OUTPUT
    
    # Always setup the consolidated environment (first time or update)
    - name: Setup consolidated environment
      run: |
            # Create necessary directories on server
        ssh -i ~/.ssh/key.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} 'mkdir -p ~/app/scripts/deploy ~/app/scripts/nginx ~/app/scripts/cleanup ~/app/nginx/conf.d'
        
        # Copy all necessary files
        scp -i ~/.ssh/key.pem -r scripts/* ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/app/scripts/
        scp -i ~/.ssh/key.pem -r nginx/* ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/app/nginx/
        scp -i ~/.ssh/key.pem docker-compose.prod.yml docker-compose.staging.yml ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/app/
        
        # Create docker-compose.merged.yml on the server
        ssh -i ~/.ssh/key.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} 'cd ~/app && chmod +x ./scripts/deploy/*.sh ./scripts/nginx/*.sh ./scripts/cleanup/*.sh && ./scripts/deploy/create-docker-compose.sh'
        
        # If this is the first setup, clone the repo and do full setup
        if [ "${{ steps.check-setup.outputs.setup_needed }}" = "true" ]; then
          echo "Performing initial setup..."
          ssh -i ~/.ssh/key.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} 'cd ~/app && ./scripts/cleanup/cleanup-docker.sh && if [ ! -d "blackflow" ]; then git clone https://github.com/samif0/blackflow.git blackflow; fi && docker-compose -f docker-compose.merged.yml -f docker-compose.prod.yml build blackflow-prod && docker-compose -f docker-compose.merged.yml -f docker-compose.staging.yml build blackflow-staging && docker-compose -f docker-compose.merged.yml -f docker-compose.prod.yml -f docker-compose.staging.yml up -d'
        else
          echo "Updating existing deployment..."
          ssh -i ~/.ssh/key.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} 'cd ~/app && cd blackflow && git pull && cd .. && docker-compose -f docker-compose.merged.yml -f docker-compose.prod.yml build blackflow-prod && docker-compose -f docker-compose.merged.yml -f docker-compose.staging.yml build blackflow-staging && docker-compose -f docker-compose.merged.yml -f docker-compose.prod.yml -f docker-compose.staging.yml up -d'
        fi
        
        # Clean up
        ssh -i ~/.ssh/key.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} 'cd ~/app && docker image prune -af --force'

    
    - name: Verify deployments
      run: |
        echo "Deployments completed. Verifying health endpoints..."
        sleep 15
        curl -s http://${{ secrets.EC2_HOST }}/api/health || echo "Could not reach production health endpoint"
        curl -s http://staging.${{ secrets.EC2_HOST }}/api/health || echo "Could not reach staging health endpoint"
