name: CI/CD Deployment Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci 
      
      - name: Run tests
        run: npm test || echo "No tests available yet"
  
  deploy-consolidated:
    name: Deploy to Consolidated Environment
    needs: test
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install SSH Key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        name: id_ed25519
        known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
        if_key_exists: replace
    
    - name: Create environment files
      run: |
        # Create staging environment file
        echo "version: '3'" > docker-compose.staging.yml
        echo "services:" >> docker-compose.staging.yml
        echo "  blackflow-staging:" >> docker-compose.staging.yml
        echo "    environment:" >> docker-compose.staging.yml
        echo "      - NODE_ENV=staging" >> docker-compose.staging.yml
        echo "      - API_URL=${STAGING_API_URL}" >> docker-compose.staging.yml
        echo "      - AUTH_SECRET=${STAGING_AUTH_SECRET}" >> docker-compose.staging.yml
        echo "      - DATABASE_URL=${STAGING_DATABASE_URL}" >> docker-compose.staging.yml
        
        # Create production environment file
        echo "version: '3'" > docker-compose.prod.yml
        echo "services:" >> docker-compose.prod.yml
        echo "  blackflow-prod:" >> docker-compose.prod.yml
        echo "    environment:" >> docker-compose.prod.yml
        echo "      - NODE_ENV=production" >> docker-compose.prod.yml
        echo "      - API_URL=${PROD_API_URL}" >> docker-compose.prod.yml
        echo "      - AUTH_SECRET=${PROD_AUTH_SECRET}" >> docker-compose.prod.yml
        echo "      - DATABASE_URL=${PROD_DATABASE_URL}" >> docker-compose.prod.yml
      env:
        STAGING_API_URL: ${{ secrets.STAGING_API_URL }}
        STAGING_AUTH_SECRET: ${{ secrets.STAGING_AUTH_SECRET }}
        STAGING_DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        PROD_API_URL: ${{ secrets.PROD_API_URL }}
        PROD_AUTH_SECRET: ${{ secrets.PROD_AUTH_SECRET }}
        PROD_DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
    
    - name: Configure Nginx with domain
      run: |
        mkdir -p nginx/conf.d
        
        export DOMAIN_NAME="${{ secrets.DOMAIN_NAME }}"
        export STAGING_DOMAIN_NAME="staging.${{ secrets.DOMAIN_NAME }}"
        
        chmod +x scripts/nginx/create-nginx-conf.sh scripts/nginx/create-server-blocks.sh
        ./scripts/nginx/create-nginx-conf.sh
        
        cat > scripts/nginx/domain-variables.sh << EOF
        #!/bin/bash
        export DOMAIN_NAME="$DOMAIN_NAME"
        export STAGING_DOMAIN_NAME="$STAGING_DOMAIN_NAME"
        EOF
        chmod +x scripts/nginx/domain-variables.sh
        
        ./scripts/nginx/create-server-blocks.sh
    
    - name: Ensure app directory exists
      run: |
        ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} 'mkdir -p ~/app/nginx/ssl'
    
    - name: Check if initial setup is needed
      id: check-setup
      run: |
        SETUP_NEEDED=$(ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "if [ -f ~/app/docker-compose.merged.yml ]; then echo 'false'; else echo 'true'; fi")
        SSL_EXISTS=$(ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "if [ -f ~/app/nginx/ssl/cert.pem ] && [ -f ~/app/nginx/ssl/key.pem ]; then echo 'true'; else echo 'false'; fi")
        echo "setup_needed=$SETUP_NEEDED" >> $GITHUB_OUTPUT
        echo "ssl_exists=$SSL_EXISTS" >> $GITHUB_OUTPUT
        
    - name: Setup consolidated environment
      run: |
        # Create necessary directories on server
        ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} 'mkdir -p ~/app/scripts/deploy ~/app/scripts/nginx ~/app/scripts/cleanup ~/app/nginx/conf.d ~/app/nginx/ssl'
        
        # Copy all necessary files
        scp -r scripts/* ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/app/scripts/
        scp -r nginx/* ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/app/nginx/
        scp docker-compose.prod.yml docker-compose.staging.yml ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/app/
        
        # Create docker-compose.merged.yml on the server
        ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} 'cd ~/app && chmod +x ./scripts/deploy/*.sh ./scripts/nginx/*.sh ./scripts/cleanup/*.sh && ./scripts/deploy/create-docker-compose.sh'
        
        # First time setup
        if [ "${{ steps.check-setup.outputs.setup_needed }}" = "true" ]; then
          echo "Performing initial setup..."
          
          if [ "${{ steps.check-setup.outputs.ssl_exists }}" = "false" ]; then
            echo "NO SSL certificates found!"
          else
            echo "SSL certificates exist..."
          fi
          
          # Clone repo and setup application
          ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} 'cd ~/app && ./scripts/cleanup/cleanup-docker.sh && if [ ! -d "blackflow" ]; then git clone https://github.com/samif0/blackflow.git blackflow; fi && docker-compose -f docker-compose.merged.yml -f docker-compose.prod.yml build blackflow-prod && docker-compose -f docker-compose.merged.yml -f docker-compose.staging.yml build blackflow-staging && docker-compose -f docker-compose.merged.yml -f docker-compose.prod.yml -f docker-compose.staging.yml up -d'
        else
          echo "Updating existing deployment..."
          # For normal deployments, just update the code and restart containers
          ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} 'cd ~/app && cd blackflow && git pull && cd .. && docker-compose -f docker-compose.merged.yml -f docker-compose.prod.yml build blackflow-prod && docker-compose -f docker-compose.merged.yml -f docker-compose.staging.yml build blackflow-staging && docker-compose -f docker-compose.merged.yml -f docker-compose.prod.yml -f docker-compose.staging.yml up -d'
        fi
        
        # Clean up
        ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} 'cd ~/app && docker image prune -af --force'
 
    - name: Verify deployments
      run: |
        echo "Deployments completed. Verifying health endpoints..."
        sleep 15
        curl -k https://${{ secrets.DOMAIN_NAME }}/api/health || echo "Could not reach production health endpoint"
        curl -k https://staging.${{secrets.DOMAIN_NAME) }}/api/health || echo "Could not reach staging health endpoint"
