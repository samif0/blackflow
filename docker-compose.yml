version: '3'

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
    internal: true  # Makes this a private network

services: 
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    networks:
      - frontend
      - backend
    restart: unless-stopped
  blackflow-prod:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    ports:
      - "3000:3000"
    environment: 
      - NODE_ENV=production
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - frontend

  blackflow-staging:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - NODE_ENV=staging
    ports:
      - "3000:3000"
    environment: 
      - NODE_ENV=staging
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - frontend

  blackflow-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "3001:3000"
    volumes:
      - .:/app
      - /app/node_modules
    environment: 
      - NODE_ENV=development
    command: npm run dev
    networks:
      - frontend
      
  auth:
    build:
      context: ./services/auth
      dockerfile: Dockerfile
    expose:
      - "3000"
    environment:
      - GIN_MODE=release
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend
          

  # TODO: Database service example
  # db:
  #   image: postgres:14-alpine
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   environment:
  #     - POSTGRES_USER=SECRET
  #     - POSTGRES_PASSWORD=SECRET
  #     - POSTGRES_DB=SECRET
  #   ports:
  #     - "5432:5432"
  #   networks:
  #     - backend
  #   restart: unless-stopped

  # TODO: Cache service example
  # redis:
  #   image: redis:alpine
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - backend
  #   restart: unless-stopped

# TODO: Configure volumes for persistent data
# volumes:
#   postgres_data:
#   redis_data:
